#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Dec 13 11:12:51 2021

@author: schaferjw

The .msa file is created using HHMER
Prepare original MSA and subfamily alignments to be run by GREMLIN and MSATransformer

"""
import filecmp
from Bio import AlignIO
import os
from os import listdir
from os.path import isfile, join
from itertools import cycle, islice
import tarfile
import numpy as np
import pandas as pd
import subprocess


class Edit_MSA():
    def __init__(self,file_in,msa,names,parser):
        #write MSA in a3m format for HHFILTER
        names = [">"+line for line in names]
        gen = np.array([el for el in list(self.roundrobin(names,msa))])
        np.savetxt('temp.a3m',gen, fmt='%s')

        #Run HHFILTER to generate subfamily alignments
        qid_list = []
        for i in np.linspace(0,50,num=51):
            if i < 10:i = str('0{:}'.format(int(i)))
            else: i = str(int(i))
            qid_list.append(i)
        
        for i in qid_list: 
            subprocess.check_output('hhfilter -i temp.a3m -o {:}/msa_{:}.a3m -qid {:}'.format(file_in[:-4],i,i), shell=True)
        subprocess.check_output('rm -f temp.a3m ', shell=True)

        #remove any alignment generated by qid filter that is redundant
        files = [i for i in listdir('{:}/'.format(file_in[:-4])) if isfile(join('{:}/'.format(file_in[:-4]), i))]
        files = [i for i in files if i[-3:] == 'a3m']
        files = sorted(files, key = lambda x: x.rsplit('.', 1)[0])
        remove = []
        for i in range(len(files)-1):
            if filecmp.cmp('{:}/{:}'.format(file_in[:-4],files[i]), '{:}/{:}'.format(file_in[:-4],files[i+1])) == True:
                remove.append(files[i+1])
        for i in remove:
            os.system('rm -f {:}/{:}'.format(file_in[:-4],i))

        #filter thresholds
        self.row = 0.25
        self.column = 0.75

        files = [i for i in listdir('{:}/'.format(file_in[:-4])) if isfile(join('{:}/'.format(file_in[:-4]), i))]
        files = [i for i in files if i[-3:] == 'a3m']
        files = sorted(files, key = lambda x: x.rsplit('.', 1)[0])
        
        if parser == 'QID' or parser == 'E-value':
            pass
        else:
            print('You can only choose E-value or QID...')
            exit()

        for file in files:
            align = AlignIO.read("{:}/{:}".format(file_in[:-4],file), "fasta")
            seqs = [str(record.seq[:]) for record in align]
            names = [record.id[:].ljust(36) for record in align]
            
            df = pd.DataFrame(seqs, index=(names))
            df = df[0].str.split('',expand=True)             #seperate all a.a. into there own column
            if df[0][0] == '':
                df = df.drop([0],axis=1)                     #if first column is empty it is deleted
            temp = list(df)
            if df[temp[-1:][0]][0] == '':                    #if the last column is empty delete it
                df = df.drop(temp[-1:][0],axis=1)
            print('msa started at {:} rows and {:} columns'.format(df.shape[0],df.shape[1]))

            remove = []
            for i in df.columns:
                if df[i][0] == '-':
                    remove.append(i)
            df = df.drop(columns=remove)
            aa = list(df)
            aa = list(range(aa[0],len(aa)+int(aa[0])))
            name = list(df.index.values)
            msa = df.values.tolist()
            
            print('msa has been reduced to {:} rows and {:} columns'.format(df.shape[0],df.shape[1]))
            
            msa,name = self.Remove_rows(msa, name)
            df_a3m = pd.DataFrame(msa,index=(name),columns=aa)
            msa_a3m = df_a3m.to_numpy()
            msa_a3m = [''.join(line) for line in msa_a3m]
            names_a3m = list(df_a3m.index)
            names_a3m = [">"+line for line in names_a3m]
            gen = np.array([el for el in list(self.roundrobin(names_a3m,msa_a3m))])
            np.savetxt('{:}/{:}'.format(file_in[:-4],file),gen, fmt='%s')
            
            msa,name,aa = self.Remove_columns(msa, name, aa)
            df = pd.DataFrame(msa,index=(name),columns=aa)
            df.to_csv('{:}/{:}.csv'.format(file_in[:-4],file[:-4]))
            os.system('sed "s/,//g" < {:}/{:}.csv > {:}/{:}.out'.format(file_in[:-4],file[:-4],file_in[:-4],file[:-4]))
            os.system('sed -i -e "1d" {:}/{:}.out'.format(file_in[:-4],file[:-4]))
            os.system('rm -f {:}/{:}.out-e'.format(file_in[:-4],file[:-4]))
            

        if parser == 'E-value':
            files = [i for i in listdir('{:}/'.format(file_in[:-4])) if isfile(join('{:}/'.format(file_in[:-4]), i))]
            files = [i for i in files if i[-3:] == 'a3m']
            files = sorted(files, key = lambda x: x.rsplit('.', 1)[0])
            
            print('E-value is active...')
            output = [sum(1 for line in open('{:}/{:}'.format(file_in[:-4],file))) for file in files]
            align = AlignIO.read("{:}/{:}".format(file_in[:-4],files[0]), "fasta")
            seqs = [str(record.seq[:]) for record in align]
            names = [record.id[:].ljust(36) for record in align]
            df = pd.DataFrame(seqs, index=(names))
                        
            for idx in range(len(output)):
                df_iter = df.copy()
                N = int((output[0] - output[idx])/2)
                if N != 0: df_iter = df_iter.iloc[:-N]
                df_iter = df_iter[0].str.split('',expand=True)             #seperate all a.a. into there own column
                if df_iter[0][0] == '':
                    df_iter = df_iter.drop([0],axis=1)                     #if first column is empty it is deleted
                temp = list(df_iter)
                if df_iter[temp[-1:][0]][0] == '':                    #if the last column is empty delete it
                    df_iter = df_iter.drop(temp[-1:][0],axis=1)
                print('msa started at {:} rows and {:} columns'.format(df_iter.shape[0],df_iter.shape[1]))
                df_a3m = df_iter
                msa_a3m = df_a3m.to_numpy()
                msa_a3m = [''.join(line) for line in msa_a3m]
                names_a3m = list(df_a3m.index)
                names_a3m = [">"+line for line in names_a3m]
                gen = np.array([el for el in list(self.roundrobin(names_a3m,msa_a3m))])
                np.savetxt('{:}/{:}'.format(file_in[:-4],files[idx]),gen, fmt='%s')
                
                df_iter.to_csv('{:}/{:}.csv'.format(file_in[:-4],files[idx][:-4]))
                os.system('sed "s/,//g" < {:}/{:}.csv > {:}/{:}.out'.format(file_in[:-4],files[idx][:-4],file_in[:-4],files[idx][:-4]))
                os.system('sed -i -e "1d" {:}/{:}.out'.format(file_in[:-4],files[idx][:-4]))
                os.system('rm -f {:}/{:}.out-e'.format(file_in[:-4],files[idx][:-4]))
        
        #remove any alignment preprocessing made redundant
        files = [i for i in listdir('{:}/'.format(file_in[:-4])) if isfile(join('{:}/'.format(file_in[:-4]), i))]
        files = [i for i in files if i[-3:] == 'out']
        files = sorted(files, key = lambda x: x.rsplit('.', 1)[0])
        remove = []
        for i in range(len(files)-1):
            if filecmp.cmp('{:}/{:}'.format(file_in[:-4],files[i]), '{:}/{:}'.format(file_in[:-4],files[i+1])) == True:
                remove.append(files[i+1])
        for i in remove:
            os.system('rm -f {:}/{:}.out'.format(file_in[:-4],i[:-4]))
            os.system('rm -f {:}/{:}.a3m'.format(file_in[:-4],i[:-4]))
            os.system('rm -f {:}/{:}.csv'.format(file_in[:-4],i[:-4]))
            os.system('rm -f {:}/{:}.pkl'.format(file_in[:-4],i[:-4]))

            
    def roundrobin(self,*iterables):
        "roundrobin('ABC', 'D', 'EF') --> A D E B F C"
        # Recipe credited to George Sakkis
        num_active = len(iterables)
        nexts = cycle(iter(it).__next__ for it in iterables)
        while num_active:
            try:
                for next in nexts:
                    yield next()
            except StopIteration:
                # Remove the iterator we just exhausted from the cycle.
                num_active -= 1
                nexts = cycle(islice(nexts, num_active))

    def Remove_rows(self,msa,name):

        """
        Filter sequences that cover less than 25% of the query sequence
        """

        # Create list of sequences that have too many gaps and remove them from both msa and name
        msa_red = []
        name_red = []

        for i in range(len(msa)):
            if msa[i].count('-')/len(msa[0]) > self.row:
                msa_red.append(msa[i])
                name_red.append(name[i])
        for i in msa_red:
            msa.remove(i)
        for i in name_red:
            name.remove(i)
        #__________________________________________________________

        # check to see if filter removed too many sequences or none.
        if len(msa_red) == 0:
            print('All sequences in alignment passed the {:} row gap threshold!'.format(self.row))
        elif len(msa_red) == len(msa):
            print('This gap cutoff has removed all sequences from the msa, choose a higher cutoff.')
        else:
            print('msa has been reduced to {:} rows and {:} columns'.format(len(msa),len(msa[0])))
        return msa,name
    
    def Remove_columns(self,msa,name,aa):
        """
        columns that are made up of greater than 25% gaps will be excluded 
        """
        # create datafrom with positions as column titles and seq name as index titles
        df = pd.DataFrame(msa,index=(name))      #create initial data frame
        df.columns = aa
        #__________________________________________________________

        #Remove columns 
        freq_all = []
        freq_ = []
        temp = list(df)
        for f in temp:
            freq_.append((df[df[f]=='-'].shape[0]/df[f].count(),f))   #isolate frequency of - in columns
            freq_all.append((df[f].value_counts(normalize=True)))  #all frequencies if needed in columns
        for f in freq_:
            if f[0] > self.column:
                df = df.drop([f[1]],axis=1)

        #__________________________________________________________

        print('msa has been reduced to {:} rows and {:} columns'.format(df.shape[0],df.shape[1]))
        name = list(df.index.values)
        msa = df.values.tolist()
        aa = list(df)

        return msa, name, aa
                
                
class TARFILE():
    def Compress(directory,files,name):
        tar = tarfile.open("tmp/{:}.tar.gz".format(name), "w:gz")
        for file in files:
            file = directory +'/'+ file
            tar.add(file)
            os.system('rm -f {:}'.format(file))
        tar.close()
        
    def Open_File(directory,file):
        tar = tarfile.open("tmp/{:}".format(file), "r:gz")
        tar.extractall('./tmp')
        tar.close()
        
        os.system('mv tmp/{:}/* {:}/'.format(directory,directory))
